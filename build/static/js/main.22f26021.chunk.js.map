{"version":3,"sources":["components/Navbar.tsx","pages/AboutPage.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/TodosPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","href","to","AboutPage","history","useHistory","onClick","push","TodoForm","props","ref","useRef","type","id","placeholder","onKeyPress","event","key","addHandler","current","value","htmlFor","TodoList","todos","onRemove","onToggle","length","map","todo","classes","completed","join","checked","onChange","bind","title","preventDefault","removeHandler","TodosPage","useState","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","prev","confirm","filter","App","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22f26021.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const Navbar: React.FunctionComponent = () => (\n  <nav>\n    <div className=\"nav-wrapper red darken-3 px1\">\n      <a href=\"/\" className=\"brand-logo\">\n        React + TypeScript\n      </a>\n      <ul className=\"right hide-on-med-and-down\">\n        <li>\n          <NavLink to=\"/\">Task list</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/about\">Information</NavLink>\n        </li>\n      </ul>\n    </div>\n  </nav>\n);\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const AboutPage: React.FunctionComponent = () => {\n  const history = useHistory();\n  return (\n    <>\n      <h1> Information Page</h1>\n      <p>\n        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Unde aperiam\n        ex, iure laudantium labore commodi numquam accusamus. Voluptas,\n        reprehenderit incidunt ex, ad numquam commodi quo nesciunt perspiciatis\n        laborum molestiae aliquam? Iste quaerat sapiente deleniti numquam unde\n        ratione porro libero quos mollitia commodi excepturi possimus aliquam\n        expedita beatae, doloribus a illo molestiae facilis ea aperiam ab vel?\n        Quos distinctio explicabo sequi!\n      </p>\n      <button className=\"btn\" onClick={() => history.push(\"/\")}>\n        {\" \"}\n        Back to todo list\n      </button>\n    </>\n  );\n};\n","import React, { useRef } from \"react\";\n\ninterface TodoFormProps {\n  addHandler(title: string): void;\n}\n\nexport const TodoForm: React.FunctionComponent<TodoFormProps> = (props) => {\n  //   const [title, setTitle] = useState<string>(\"\");\n  const ref = useRef<HTMLInputElement>(null);\n\n  //   const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //     setTitle(event.target.value);\n  //   };\n\n  const keyPressHandler = (event: React.KeyboardEvent) => {\n    if (event.key === \"Enter\") {\n      props.addHandler(ref.current!.value);\n      ref.current!.value = \"\";\n      //   console.log(title);\n    }\n  };\n\n  return (\n    <div className=\"input-field mt2\">\n      <input\n        // onChange={changeHandler}\n        // value={title}\n        ref={ref}\n        type=\"text\"\n        id=\"title\"\n        placeholder=\"Inter task name\"\n        onKeyPress={keyPressHandler}\n      />\n      <label htmlFor=\"title\" className=\"active\">\n        Inter task name\n      </label>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { ITodo } from \"../interfaces\";\n\ntype TodoListProps = {\n  todos: ITodo[];\n  onToggle(id: number): void;\n  onRemove: (id: number) => void;\n};\n\nexport const TodoList: React.FunctionComponent<TodoListProps> = ({\n  todos,\n  onRemove,\n  onToggle,\n}) => {\n  if (todos.length === 0) {\n    return <p className=\"center\"> Don't have tasks</p>;\n  }\n\n  const removeHandler = (event: React.MouseEvent, id: number) => {\n    event.preventDefault();\n    onRemove(id);\n  };\n\n  return (\n    <ul>\n      {todos.map((todo) => {\n        const classes = [\"todo\"];\n\n        if (todo.completed) {\n          classes.push(\"completed\");\n        }\n\n        return (\n          <li className={classes.join(\" \")} key={todo.id}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={onToggle.bind(null, todo.id)}\n                // onChange={() => onToggle(todo.id)}\n              />\n              <span>{todo.title}</span>\n              <i\n                className=\"material-icons red-text\"\n                onClick={(event) => removeHandler(event, todo.id)}\n              >\n                delete\n              </i>\n            </label>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { TodoForm } from \"../components/TodoForm\";\nimport { TodoList } from \"../components/TodoList\";\nimport { ITodo } from \"../interfaces\";\n\ndeclare var confirm: (question: string) => boolean;\n\nexport const TodosPage: React.FunctionComponent = () => {\n  const [todos, setTodos] = useState<ITodo[]>([]);\n\n  useEffect(() => {\n    const saved = JSON.parse(localStorage.getItem(\"todos\") || \"[]\") as ITodo[];\n    setTodos(saved);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  const addHandler = (title: string) => {\n    const newTodo: ITodo = {\n      title: title,\n      id: Date.now(),\n      completed: false,\n    };\n    // setTodos([newTodo, ...todos]);\n    setTodos((prev) => [newTodo, ...prev]);\n  };\n\n  const toggleHandler = (id: number) => {\n    setTodos((prev) =>\n      prev.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    );\n  };\n\n  const removeHandler = (id: number) => {\n    const shoudRemove = confirm(\"You want remove task?\");\n    if (shoudRemove) {\n      setTodos((prev) => prev.filter((todo) => todo.id !== id));\n    }\n  };\n  return (\n    <>\n      <TodoForm addHandler={addHandler} />\n      <TodoList\n        todos={todos}\n        onToggle={toggleHandler}\n        onRemove={removeHandler}\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Navbar } from \"./components/Navbar\";\nimport { AboutPage } from \"./pages/AboutPage\";\nimport { TodosPage } from \"./pages/TodosPage\";\n\nconst App: React.FunctionComponent = () => {\n  return (\n    <BrowserRouter>\n      <Navbar />\n      <div className=\"container\">\n        <Switch>\n          <Route component={TodosPage} path=\"/\" exact />\n          <Route component={AboutPage} path=\"/about\" />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}